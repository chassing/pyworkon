[project]
name = "pyworkon"
version = "0.2.0"
description = "Software Development Project Management Tool"
authors = [{ name = "Christian Assing", email = "chris@ca-net.org" }]
license = { text = "MIT License" }
readme = "README.md"
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "prompt-toolkit>=3.0.47",
    "rich>=13.7.1",
    "pydantic>=2.8.2",
    "pyyaml>=6.0.2",
    "appdirs>=1.4.4",
    "fuzzyfinder>=2.1.0",
    "click>=8.1.7",
    "pydantic-settings>=2.4.0",
    "natsort>=8.4.0",
    "uplink>=0.9.7",
    "requests>=2.32.3",
    "diskcache>=5.6.3",
    "setuptools>=73.0.1",       # needed by uplink
]
requires-python = ">= 3.12"

[project.urls]
homepage = "https://github.com/chassing/pyworkon"
respository = "https://github.com/chassing/pyworkon"
issues = "https://github.com/chassing/pyworkon/issues"

[project.scripts]
pyworkon = 'pyworkon.__main__:run'

[tool.uv]
dev-dependencies = ["ruff>=0.6.2"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
plugins = "pydantic.mypy"
enable_error_code = "truthy-bool, redundant-expr"
no_implicit_optional = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "appdirs.*",
    "fuzzyfinder.*",
    "nubia.*",
    "orm.*",
    "pygments.token",
    "rich_click.*",
    "uplink.*",
    "uplink_httpx",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = 'py312'
required-version = "0.6.2"
src = ["pyworkon"]
fix = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN401",
    "ARG001",  # Unused argument
    "ARG002",  # Unused argument
    "CPY",     # Missing copyright header
    "D10",     # Missing docstring in XXX
    "D203",    # 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D212",    # multi-line-summary-first-line
    "D213",    # multi-line-summary-second-line
    "D4",      # Doc string style
    "E501",    # Line too long
    "EM",      # error message in exceptions
    "G004",    # Logging statement uses string formatting
    "PD",      # no pandas please
    "PLC0415", # `import` should be at the top-level of a file
    "PLR0904", # Too many public methods
    "PLR0913", # Too many arguments
    "PLR0917", # Too many positional arguments
    "S101",    # Use of assert detected. Pytest uses assert
    "S404",    # subprocess import
    "S602",    # subprocess check
    "S603",    # subprocess check for execution of untrusted input
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # try-consider-else
    # pydoclint
    "DOC",
    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",
]

[tool.ruff.format]
preview = true


[tool.ruff.lint.isort]
known-first-party = ["pyworkon"]
